@startuml

title HTML puppeteer - Classes Diagram

abstract AbstractComponent {
  #config
  #dataAttributes
  #eventsBinder
  #id
  #options
  #parent
  #stateChangesHandlersInvoker
  #stateHolder
  #stateInitializer
  #doWithState(stateUpdaterFn)
  +appendStateChangesHandlers(\nstateChangesHandlers)
  +close()
  +constructor(options)
  +disconnect()
  +getPart(partName)
  +getState()
  +partName()
  +render(value)
  +replaceFromParent()
  +replacePart(previousPartName, \nnewPart, newPartName)
  +replaceParts(parts)
  +replaceState(newState)
  +stateIsNull(): boolean
}

/'note top of AbstractComponent
  Contains methods
  usually doing these:

  - receive a (DOM) event
  - analyze the event
  - change the state using
  <i>doWithState(fn(stateHolder))</i>
end note'/

/'  State changing methods
  might use <i>syncState()</i>.
end note'/

/'note left of AbstractComponent::constructor
<i>config</i> parameter is used
to set/initialize any field.

If too complex <i>config</i> could
actually be a <i>configurer</i> class.

An important <i>config</i> attribute
is the component's DOM element
which usually will already exist.
end note'/

/'note left of AbstractComponent::domElement
Is the component's DOM element
which for parent/root components
will usually already exist.
Part owner components on the
other hand should be able to
create and identify it by only
using the state; e.g. dom
element's id could be <i>partName</i>.
end note'/

note left of AbstractComponent::config
constructor <i>options</i>
(come first) + <i>dataAttributes</i>
end note

note left of AbstractComponent::options
constructor <i>options</i>
end note

note left of AbstractComponent::doWithState
Applies (using <i>stateUpdaterFn</i>)
the state changes then
passes the related events to
<i>StateChangesHandlersInvoker</i>.
end note

note left of AbstractComponent::"close()"
Clears the state
and <i>disconnect()</i>.
end note

note left of AbstractComponent::"disconnect()"
Detaches the DOM
event handlers.
end note

/'note left of AbstractComponent::syncState
Synchronizes state with
its visual representation.
end note'/

note left of AbstractComponent::getState
Returns a state copy.
end note

note left of AbstractComponent::"render(value)"
Attaches DOM event
handlers, initializes the
state using <i>value</i>
(if provided, otherwise
uses <i>stateInitializer</i>)
and handles the state
loading errors.
end note

/'abstract AbstractContainerComponent extends AbstractComponent {
  +create(partName, partValue)
  +remove(partName)
  +replace(partName, partValue)
  +move(partName, toPartName)
}'/

class SimpleContainerIllustrator extends SimplePartsIllustrator {
#childrenShells: ChildrenShells
#container: SimpleContainerComponent
#newChildrenGoLast: boolean
+constructor(container)
+created(stateChange)
+partChangeOccurred(partStateChange)
+partCreated(partStateChange)
+partRelocated(partStateChange)
+partRemoved(partStateChange)
+partReplaced(partStateChange)
+replaced(stateChange)
}

class ChildrenShells {
#$containerElem: jQuery<HTMLElement>
#childrenShellFinder: ChildrenShellFinder
#parentId: string
#place: "append" | "prepend"
#shellIsParentHtml: boolean
#shellTemplate: string
+constructor(options)
+getOrCreateShell(partName)
+removeShell(partName)
}

class ChildrenComponents {
#children: {partName: AbstractComponent}
#childrenCreationCommonOptions
#childrenShellFinder: ChildrenShellFinder
#dontRender: boolean
#parent: AbstractComponent
+closeAndRemoveChild(partName)
+closeAndRemoveChildren()
+constructor(options)
+createChildrenForExistingShells()
+createOrUpdateChild(partName, $shell)
+disconnectAndRemoveChildren()
+getChildById(itemId)
+getChildByPartName(partName)
+updateFromParent(partName)
}

SimpleContainerIllustrator -down-> ChildrenComponents
SimpleContainerIllustrator *-down- ChildrenShells

abstract EventsBinder {
  component: AbstractComponent
  +constructor(component)
  {abstract}+attachEventHandlers()
  {abstract}+detachEventHandlers()
}

note bottom of EventsBinder
  Contains handlers for DOM events.
  Usual handler processing:
  - capture only intended events
  (use business agnostic filters)
  - invoke suitable component methods
end note

abstract StateInitializer {
{abstract}+load(component)
}

/'note bottom of StateInitializer
sets component's state
(from e.g. a repository)
end note'/

class ValueStateInitializer extends StateInitializer {
#value
+load(component)
}

class ChildStateInitializer extends ValueStateInitializer {
+load(component)
}

class StateChange {
#changeType
#previousState
#newState
}

class PartStateChange extends StateChange {
#previousPartName
#previousPart
#newPartName
#newPart
}

'interface StateChangeAugmenter<T extends StateChange> {
interface StateChangeAugmenter {
+augment(stateChange): T
}

interface StateChangesCollector {
#stateChanges
#stateChangeAugmenter
+collect(stateChange)
+collect(stateChanges)
+consumeOne(): StateChange
+consumeAll(): StateChange[]
}

interface StateHolder {
#_currentState
#_stateChangesCollector
/'
#_collectStateChanges(\nstateChanges): StateChange[]
#_currentStateEquals(\nanotherState): boolean
#_replaceImpl(newState): previousState
#_stateChangesOf(previousState,\nnewState): StateChange[]
'/
+constructor({stateChangeAugmenter,\nstateChangesCollector, ...restOfOptions})
+hasNull(): boolean
+hasUndefined(): boolean
+replace(newState,\n[dontRecordChanges]): StateChange[]
+stateChangesCollector()
+stateCopy()
}

/'note left of StateHolder::replace
Besides replacing the
state it'll also record
the changes using
<i>stateChangesCollector</i>.
end note'/

interface PartialStateHolder extends StateHolder {
+getPart(partName, [dontClone])
+getParts(): {[key: string]: *}[]
+hasNullPart(partName): boolean
+replacePart(\npreviousPartName, \nnewPart, newPartName, \n[dontRecordChanges])
}

' note left of PartialStateHolder::replacePart
note bottom of PartialStateHolder
A null/undefined replacement
value should be treated as
"completelly remove the
associated objects" while
an empty object should be
treated as: the part's are
missing but the whole exists.
end note

class SimpleContainerComponent extends AbstractComponent {
#childrenComponents: ChildrenComponents
+close()
+constructor(options)
+disconnect()
+replacePartByChildId(childId, newPart, newPartName)
}

SimpleContainerComponent *-down- ChildrenComponents

/'interface ErrorsHandler {
+accept(error)
}'/

interface AbstractView {
+create(value)
+remove()
+replace(value)
}

/'note right of AbstractView::create
Creates the DOM
element to contain
the <i>value</i> to display.
If <i>value</i> is not empty
calls <i>replace(value)</i>
to show them.
end note'/

/'note left of AbstractView::replace
Replaces the previous
displayed value with
the new ones.
end note'/

/'note right of AbstractView::remove
Removes the view's
DOM element.
end note'/

class SimpleView implements AbstractView {
#$elem: jQuery<HTMLElement>
#removedPlaceholder
#viewRemovalStrategy: \n\tREMOVE_ELEMENT |\n\tREMOVE_CONTENT |\n\tUSE_HTML
#viewRenderStrategy: \n\tRENDER_VAL |\n\tRENDER_TEXT |\n\tRENDER_HTML
#viewValuesTransformerFn
+constructor(options)
+create(values)
+remove()
+replace(values)
}

class AbstractTemplateView extends SimpleView {
#htmlTemplate: string
+constructor({htmlTemplate,\ntemplateId, ...restOfOptions})
}

class SimpleTemplateView extends AbstractTemplateView {
+remove()
+replace(values)
}

class StateChangesHandlersInvoker {
#stateChangesHandlers
+appendStateChangesHandlers(...stateChangesHandler)
+constructor(options)
+processStateChanges(stateChangesCollector)
}

/'note left of StateChangesHandlersInvoker::handlerMappingRules
Defaults to:
- map state initialization
(aka creation) to
<i>created(stateChange)</i>
- map state modification
to <i>replaced(stateChange)</i>
- map state part (aka section)
modification to
<i>partReplaced(stateChange)</i>
- map state part removal to
<i>partRemoved(stateChange)</i>
end note'/

' note left of StateChangesHandlersInvoker::processStateChanges
note top of StateChangesHandlersInvoker
Conveys state changes
to the registered handlers.
end note

interface StateChangesHandler {
+created(stateChange)
+replaced(stateChange)
+removed(stateChange)
+changeOccurred(stateChange)
}

interface PartialStateChangesHandler extends StateChangesHandler {
+partChangeOccurred(stateChange)
+partCreated(stateChange)
+partRelocated(stateChange)
+partRemoved(stateChange)
+partReplaced(stateChange)
}

abstract ComponentIllustrator implements StateChangesHandler {
#view: AbstractView
+constructor({view, viewProviderFn, ...restOfOptions})
+created(stateChange)
+removed(stateChange)
+replaced(stateChange)
}

note top of ComponentIllustrator
<i>created</i>, <i>replaced</i>, <i>removed</i>
delegate to the
corresponding <i>view</i> methods.
<i>changeOccurred</i> does nothing.
end note

class SimplePartsIllustrator extends ComponentIllustrator implements PartialStateChangesHandler {
+constructor({viewValuesTransformerFn, ...restOfOptions})
+partChangeOccurred(partStateChange)
+partCreated(partStateChange)
+partRelocated(partStateChange)
+partRemoved(partStateChange)
+partReplaced(partStateChange)
}

note left of SimplePartsIllustrator
By default will render
(aka pass to <i>view</i>) the
complete new state.
end note

/'abstract PartsAllocator implements PartialStateChangesHandler {
parts: Map<partName, AbstractComponent>
stateSynchronizer
#createNewOwners(stateChange)
#removeMissingOwners(stateChange)
#{abstract}createOwner(partName, part)
}

note top of PartsAllocator
Contains methods usually doing these:
- analyze the state changes
- manage the state parts owners
end note

note left of PartsAllocator::createNewOwners
- iterates the state parts
- creates new part owning components
- calls <i>newOwner.render(part)</i>
end note

note left of PartsAllocator::removeMissingOwners
- iterates the state parts
- closes then removes
  the <i>parts</i> no longer
  found in iterator
end note

class StateSynchronizer {
  #stateHolder
  #domValuesReader
  #partOwners: Map<partName, AbstractComponent>
  +syncState()
  +viewUpdated(view)
  +partOwnersUpdated(partOwners)
  #syncStateWithView()
  #syncStateWithPartOwners()
}

note left of StateSynchronizer::syncState
Updates (silently) the
state using view's value
and part owners state.
end note

note left of StateSynchronizer::syncStateWithPartOwners
It'll call <i>syncState()</i> on
part owners components
before reading their state.
end note'/

/'abstract DomValuesReader {
  view: AbstractView
  {abstract}+extractDomValues()
}'/

AbstractComponent *-down- EventsBinder
AbstractComponent *-down- StateHolder
AbstractComponent *-down- StateInitializer
'AbstractComponent *-down- DomValuesReader
'AbstractComponent *-down- ErrorsHandler
AbstractComponent *-up- StateChangesHandlersInvoker
StateChangesHandlersInvoker *-up- "many" StateChangesHandler
ComponentIllustrator *-- AbstractView
StateHolder *-- StateChangesCollector
StateChangesCollector *-- "many" StateChange
StateChangesCollector *-- StateChangeAugmenter

@enduml
